var tipuesearch = {"pages": [
     {"title": "introduction", "text": "     pascli is a library written for Free Pascal and aims to provide components that allow the rapid creation of command line applications.    It uses a Builder to allow the description of arguments, commands and options, performs the automatic validation of these parameters and also displays the appropriate syntax for using the application to the user.    This strategy allows the developer to focus on the implementation of commands and create an application with a simple code structure.    Features              Fluent interface api to build the command strucuture.    Built-in constraints to validate allowed commands, allowed options, not allowed options, and arguments.    Short options or long options using the method AddOption    Options with required value or not    Command usage out of the box, outputs command information for a given command or general usage of the tool.    Command version output procedure.    Command colors unit to produce colored output to the user.    Full unit tested.          Requirements      This library was developed using FPC 3.2.2, but it may work with older versions. Should work under Linux, MacOS and Windows.    License      pascli is free and open-source software licensed under the MIT License.                  Next Quick start            Overview", "tags": "", "url": "introduction.html"},
     {"title": "quickstart", "text": "     Create a project      Create a project named helloWorld using Lazarus or an editor of your preference.    Manual install              Download the zip file from releases page. Or you can just clone the repository.    Unzip it to a folder of your preference.    Create a new project using Lazarus, open the project options, access the &quot;compiler options / paths&quot; section , and add the pascli &quot;src&quot; folder to the field &quot;Other unit files&quot;, use the search button &quot;...&quot; to locate this folder.          Boss install      Another option to install pascli is using the boss (check it for installation instructions). If boss is already installed: just type in the command line from the project folder:          boss init --quiet  boss install github.com/leandro-lprsoft/pascli        This commands will download the library inside a subfolder &quot;modules/pascli/src&quot; and add this new path to the search path of the project.    Why use boss? It manages project dependencies and allows you to update dependencies when needed. It allows you to quickly operate with a previous version of that dependency reducing compatibility risks with new versions. When a new version appears you can simply type from the command line in the project folder:          boss update        Edit the project      Open the project using Lazarus or an editor of your preference and replace all with the following code:          program helloWorld;    {$MODE DELPHI}{$H+}    uses    {$IFDEF UNIX}    cmem, cthreads,    {$ENDIF}    Command.Interfaces,    Command.App,    Command.Usage,    Command.Version;    var    Application: TCommandApp;    {$R *.res}    procedure HelloCommand(ABuilder: ICommandBuilder);  begin    WriteLn('Hello world!');  end;    begin    Application := TCommandApp.Create(nil);    Application.Title := 'a basic cli tool sample project';      Command.Usage.Registry(Application.CommandBuilder);    Command.Version.Registry(Application.CommandBuilder);      Application      .CommandBuilder        .AddCommand(          'hello',          'Show a hello world message.''Show a hello world message.'#13#10 +          'Ex: basic hello',          @HelloCommand,          [ccNoParameters]);      Application.Run;    Application.Free;  end.        Now compile it, open a terminal at the project source path and type the following:          ./helloWorld        You should see the following output:          helloWorld version 1.0.0    Usage: helloWorld [command]     a basic cli tool sample project    Commands:     help           Shows information about how to use this tool or about a specific command.                   Ex: helloWorld help    version        Shows the helloWorld version information                   Ex: helloWorld version    hello          Show a hello world message.'Show a hello world message.                   Ex: basic hello    Run 'helloWorld help COMMAND        Try the following command to see the output:          ./helloWorld help hello        This command shows how to use the &quot;hello&quot; command, if there were available options, they would be displayed. Now you may explore this small program, try to change HelloCommand procedure to output different text. Try the tutorial to see the use of advanced options or just explore the library reference to check what is available.                  Next Application structure            Quick start", "tags": "", "url": "quickstart.html"},
     {"title": "application", "text": "     The proposed structure for the development of a command line tool using pascli starts with the use of the TCommandApp class, however the use of this class is not mandatory, and it is possible to use the TCommandBuilder directly, which will be explored in another section on this page.    Using TCommandApp as a base      As we saw in the Quick start section, using the TCommandApp base class is is pretty straight. See the steps to follow this way:    Prepare the application      Add the Command.Interfaces, Command.App, Command.Usage units to the uses clause. Declare a variable and initialize an instance of the TCommandApp class. Set the contents of the application's title property with a brief description of the tool.    Register built-in commands      Register built-in commands like UsageCommand or VersionCommand. Their respective units have commands ready to register them in CommandBuilder, with names and descriptions ready to use.    Create your own commands      The main point of building a command line tool is the execution of its own services, so with the use of this library you can focus on these issues and leave it to the library to structure the commands, display information on the use of the commands, execute validation of user-supplied parameters.    With that, you can implement your own commands based on the TCommandCallback signature. Register your own commands using the AddCommand method of the application's CommandBuilder property.    See the command below as an example:          // create your command  procedure CustomCommand(ABuilder: ICommandBuilder);  begin    if ABuilder.CheckOption('complete') then       ABuilder.Output('Has option --complete');    if ABuilder.CheckOption('c') then      ABuilder.Output('Has option -c');    ABuilder.Output('filename: ' + ABuilder.GetParsedArguments[0].Value);  end;    // register your command  Application    .CommandBuilder      .AddCommand(        'checkfile',        'check file content',        @CustomCommand,        [ccRequiresOneArgument]        )        .AddOption('c', 'complete', 'full check', [])      .AddArgument('argument parameter', acOptional);        In the code above we created a command that only checks for the existence of the &quot;complete&quot; option, this check can be done either by the short option or by the long option, we also check the name of the file passed as an argument.    This command has been configured with the name &quot;checkfile&quot; and a description accordingly, this information is displayed in the command UsageCommand to guide the user on usage. We added a constraint ccRequiresOneArgument so that the user enters a file name, if not informed, the CustomCommand callback will not be called. We also added a &quot;c&quot; option, and in its long form &quot;complete&quot;. The TCommandBuilder.AddArgument method call is at the same level as the AddCommand, that is, it is adding an argument for the tool as a whole and not for the command.    The user will need to type something like this to use this command:       tool checkfile --complete file.txt  tool checkfile -c file.txt  tool checkfile file.txt        Returning to the callback command, we have the use of the CommandBuilder's Output method instead of calling WriteLn, this format is preferable because it is possible to replace the Output callback, by another procedure of a specific callback signature to enable tests, or even redirect the output to a file for example.    You can check the description of the command structure provided by the library.    Run the application      After all that, just call the application's run method so that it takes care of analyzing the arguments provided by the user via the command line, performing the necessary checks and calling the appropriate commands once the conditions are met.    Using TCommandBuilder as a base      We cannot assume that a new application will be able to implement TCommandApp, because often the basis of a new project can be precisely the use of another base class for the application.    For this, it is possible to implement the direct use of CommandBuilder through the next steps:    Prepare the CommadBuilder      Considering that you already have an application, you need to create a variable, field or property of type ICommandBuilder and initialize it properly. See the example code:          uses    Command.Interfaces,    Command.Builder;      var    FCommandBuilder: ICommandBuilder;    begin    FCommandBuilder := TCommandBuilder.New('a custom cli tool');  end;        In the code above the FCommandBuilder could be the field of a class behind a property. The new class factory requires as a parameter the title of the application that will be used by the library, more specifically by the command UsageCommand to print usage information to the user.    Registering commands      You can register commands in the same way explained in the topics &quot;Register built-in commands&quot; and &quot;Create your own commands&quot; above.    Running the command builder      Depending on the type of application you are developing, it is necessary that you choose the appropriate time to process the arguments provided by the user, usually this is done before the application starts executing its own services. To perform this processing, just run the following TCommandBuilder commands:          FCommandBuilder.Run;        Internally builder calls the methods Parse, Validate and Execute to process the parameters provided by the user.    You can check what each command above does in detail, but it is important to know that the validate command may generate exceptions preventing the application from proceeding if the parameters informed by the user are not in accordance with what was configured.                  Next Command structure            Application structure", "tags": "", "url": "application.html"},
     {"title": "command", "text": "     The library's command structure consists of the application, commands, options, and arguments. The user will need to follow the following structure when typing some command in the terminal:          appexe [COMMAND] [OPTIONS] [ARGUMENTS]        Application      The application will be the name of the executable generated after the project is compiled. Through this name the user can choose which command to execute. The application can accept commands or arguments, but it cannot accept options because there is no configuration provided for this scenario.    Command      Name of the command associated with the action to be performed. The list of possible commands can be obtained through a specific command or it can be set as default. As long as the application has been configured to do so. The command name cannot have spaces or start with special characters. A command can accept options when configured.    Options      Options are associated with the command and allow the user to change the behavior of the command while it is running. Options must be passed as an argument using one &quot;-&quot; for their short form and two &quot;&ndash;&quot; for their long form.    Arguments      Arguments are parameters passed via the command line that are not a previously known value, that is, they cannot be configured within criteria that can be validated. For example: a name to be used as a project name for a build command, a file name, a number, etc. It is up to the developer to provide the validation of these arguments.                  Next Features            Command structure", "tags": "", "url": "command.html"},
     {"title": "features", "text": "     The library has several features and in the repository we can find the use of many of them through the existing samples. We will cover these features by illustrating how they were used in the example projects.    Fluent interface api to build the command strucuture.      This feature does not need explanations, as its implementation is illustrated through several examples contained in this documentation. You may check the fluent sample project to check how the fluent interface can be used.    Built-in constraints to validate allowed commands, allowed options, not allowed options, and arguments.      The validations of commands, options and arguments provided by the user are performed automatically by the library, freeing the user from concentrating efforts on these needs. Any application built using this library already enjoys this feature. Therefore, we can consider that all the samples in the repository serve to illustrate this validation capability.    However, an important point to emphasize is with regard to command constraints, option constraints and arguments.    We have the example of using a command constraint ccNoParameters that prevents a command from accepting any parameter when used by the user employed in the sample Colors.    Another example that we can cite is the sample options, in which we have the use of the contraints [ccRequiresOneArgument, ccRequiresOneOption] being used together. The first forces the user to supply an argument for executing the command and the other forces at least one option to be informed.    Check the enum TCommandConstraint for see all available command constraints.    Short options or long options using the method AddOption      The best example we can use for configuring options is sample options. We can clearly see that the options are configured through the AddOption command where their short form and long form are provided.    Options with required value or not      The best example we can use for configuring options is also the sample options. Whenever an option is configured using the AddOption command, some validation parameters can be informed:    * ANotAllowedOptions: this is an array of strings that can receive the flags that are prohibited for use together with the option being added to the command.    * Constraint: one of three options can be informed ocNoValue - does not allow receiving values for the option, ocRequiresValue - requires filling in a value for the option and ocOptionalValue - which does not validate if a value has been reported or not. Check the AddOption command for more information. The options must be informed by the user, as in the following example: -a=&quot;value&quot; -b=&quot;my value with spaces&quot;.    Command usage out of the box, outputs command information for a given command or general usage of the tool.      All samples are using this built-in feature. You can get a better explanation of how it works by simply trying to pick one of the samples, make some changes to the description texts of the commands, compile and run the application with the help command. For more details see the unit reference Command.Usage.    Command version output procedure.      All samples are using this built-in feature. You can get a better explanation of how it works by simply trying to pick one of the samples, compile it, and run it. There is important information in the unit Command.Version regarding the prerequisites for this feature to work.    Command colors unit to produce colored output to the user.      One of the most exciting features of the library is providing functionality to display text on the console with colors allowing the developer to provide the proper highlighting of important information.    To see how to implement a command line tool with highlighted text you can check out sample Colors. We can see that the implemented commands use the OutputColor callback function, that actually is calling ColorConsoleOutput to display the text in the selected color. It is worth noting that a color theme is defined during the creation of the TCommandBuilder, but it can be customized by the developer changing the property ColorTheme of CommandBuilder.    Full unit tested.      This is not exactly a feature, but the reason this subject is here is due to the strategy of using callbacks to implement some features such as text display, command execution, etc.    The CommandBuilder allows changing these callbacks so that the developer has the chance to simulate, capture texts, thus allowing to build an excellent testing strategy. This will be detailed in the testing topic on the next page.                  Next Testing            Features", "tags": "", "url": "features.html"},
     {"title": "testing", "text": "     This section will detail how to implement a testing strategy with regard to eventual texts shown by the commands implemented by the developer, as long as the developer uses the TCommandBuilder callbacks. Another possibility is to configure callbacks for user input through the callback property.    It is not the aim of this section to cover the entire testing strategy of the application being developed, but only what is connected with the use of the library.    You can consult the tests implemented for the library itself and see how the output and input routines have been replaced by callbacks that capture the content and divert the console output to variables and simulate a user's input preventing the test from simply getting stuck.    It will be considered that the developer has experience using the fpcunit testing framework.    Unit tests using Output      Considering that a test project already exists and that a unit implementing a TTestCase class is also available, we can proceed with the instructions below.    To test the Output of the commands executed by the application, we can follow the steps:    Preparing for setup      Add the units Command.Interfaces, Command.Builder and StrUtils to your unit that implements the TTestCase class:          uses    Command.Interfaces,    Command.App,    Command.Builder,    StrUtils;        Don't forget to add your unit that implements the command to be tested to uses clause too.    Declare a field on TTestCase private section to hold an TCommandApp instance:          private    FApplication: TCommandApp;        In the implementation section, you need to declare a variable to capture the output content and also a funcion callback to assign the text output to this variable:          var    CapturedOutput: string;    procedure MockOutput(const AMessage: string);  begin    CapturedOutput := CapturedOutput + AMessage + #13#10;  end;        Adjust the setup      The setup procedure of unit test class will be called for each unit test, so we need to intiliaze it properly.          procedure TTestMyCommand.SetUp;  begin    FApplication := TCommandApp.Create(nil);    FApplication.Title := 'testcmdapp';    // change the Output callback with our Mock, so we can capture the command outputs    FApplication.CommandBuilder.Output := @MockOutput;     // clear possible other tests output    CapturedOutput := '';   end;        Adjust the TearDown      We need to free the FApplication from memory to avoid leaks and have tests run independently of the other tests.          procedure TTestMyCommand.TearDown;  begin    FreeAndNil(FApplication);  end;        Implementing a test      We can implement a simple test using what has been prepared. Create a new test and use the following code:          procedure TTestMyCommand.TestMyCommandBasic;  var    LExpected: string;  begin    // arrange    FApplication      .CommandBuilder        // configure your command callback        .AddCommand('mycommand', 'mycommand description', @MyCommand, [])           .AddOption('m', 'my-option', 'my option description', []);      // act    FApplication      .CommandBuilder        // Inject arguments to simulate an application call made by the user        .UseArguments(['mycommand', 'm'])         .Parse;      // Here the CommandBuilder effectively calls the callback    FApplication.CommandBuilder.Execute;       // asserts    LExpected := 'my expected output''my expected output'#13#10;    AssertEquals(LExpected, CapturedOutput);  end;        This test, in addition to testing the execution of the command, is also testing if the command is called by the CommandBuilder when a certain set of parameters are passed by the user. It is worth noting the use of the UseArguments method, its purpose is to inject arguments into the CommandBuilder, without the user having to provide them, which helps a lot in tests.    Unit tests using Input      To implement a test case to test the user input of a given command we will use the work already done in the previous test in terms of preparation and setup.    Intial changes      We need to declare a variable to simulate a specific input from the user, and also provide a procedure simulate the user input. To do that add the following code to the unit implementation section:          var    MockInputLnResult: string;    function MockInputLn: string;  begin    Result := MockInputLnResult;  end;        Adjust the setup      We need to change the callback to our MockInputLn, and also initialize the variable MockInputLnResult, add these lines to TTestMyCommand.Setup method:          FApplication.CommandBuilder.InputLn := @MockInputLn;  MockInputLnResult := '';        Implementing a test      Your command should call CommandBuilder.InputLn as we see below:          procedure MyCommandWithInput(ABuilder: ICommandBuilder);  var    LAnswer: string;  begin    ABuilder.Output('Are you sure? [y], [n]: ');    LAnswer := ABuilder.InputLn();    if LAnswer = 'y' then       ABuilder.Output('Your answer was: ' + LAnswer)      // do MyCommand stuff    else      ABuilder.Output('Command aborted');  end;        Now we can implement our test and simulate user input, so that the command can be run until the end:          procedure TTestMyCommand.TestMyCommandBasicWithInput;  var    LExpected: string;  begin    // arrange    FApplication      .CommandBuilder        // configure your command callback        .AddCommand('mycommand', 'mycommand description', @MyCommandWithInput, [])           .AddOption('m', 'my-option', 'my option description', []);      // Simulates that the user entered the answer &quot;y&quot;    MockInputLnResult := 'y';      // act    FApplication      .CommandBuilder        // Inject arguments to simulate an application call made by the user        .UseArguments(['mycommand', 'm'])         .Parse;      FApplication.CommandBuilder.Execute; // Here the CommandBuilder effectively calls the callback      // asserts    AssertTrue(MockInputLnResult, ContainsText(CapturedOutput, 'Your answer was: ' + MockInputLnResult));  end;        Summary      We saw how to implement tests using library resources, but we do not deal here with tests considering the application execution via the command line. This could be done as integration tests.    In the next topic we can explore the organization of the pascli project in terms of source code, IDEs used, prerequisites, among others.                  Next About the project            Testing", "tags": "", "url": "testing.html"},
     {"title": "project", "text": "     This project was developed using Lazarus 2.2.2 and FPC 3.2.2. It may work on older versions, but it's not our team's target.    The project is also configured to work with vscode. It has configuration for build, tests and debug. However, some extensions detailed in the dependencies section below may be required.    Github repository      https://github.com/leandro-lprsoft/pascli.git    Development dependencies      There are no dependencies to work with this project in Lazarus. But to work in vscode the following dependencies are needed:            Lazbuild - needs to be in the path, so the build task should work.    Free Pascal (fpc) Debugger - vscode extension that is configured in launhc.json, you may choose one of your preference.    Omni Pascal - vscode extension to format code, for code completion, syntax check, etc.    pasc - command line tool used to show unit test report and provide watch function during development, it is used by some tasks configured in tasks.json file.          Documentation dependencies           pasdoc - it´s a documentation tool for freepascal, it´s optional for build the project, but required to build documentation. Must be in the path.    build.ps1 - is a powershell script to run pasdoc and generate the documentation site, it must be called from the project root: &quot;docs/generate/build.ps1&quot;        About the project", "tags": "", "url": "project.html"},
     {"title": "Command.App", "text": "   ", "tags": "", "url": "Command.App.html"},
     {"title": "Command.App.TCommandApp", "text": "    Ex:          uses Command.Interfaces, Command.App, Command.Usage, Command.Version;    begin    Application := TCommandApp.Create(nil);    Application.Title := 'a basic cli tool sample project';      Command.Usage.Registry(Application.CommandBuilder);    Command.Version.Registry(Application.CommandBuilder);      Application.Run;    Application.Free;  end.       ", "tags": "", "url": "Command.App.TCommandApp.html"},
     {"title": "Command.App.TCommandApp.DoRun", "text": "    ", "tags": "", "url": "Command.App.TCommandApp.html#DoRun"},
     {"title": "Command.App.TCommandApp.Create", "text": "    ", "tags": "", "url": "Command.App.TCommandApp.html#Create"},
     {"title": "Command.App.TCommandApp.CommandBuilder", "text": "   ", "tags": "", "url": "Command.App.TCommandApp.html#CommandBuilder"},
     {"title": "Command.Builder", "text": "   ", "tags": "", "url": "Command.Builder.html"},
     {"title": "Command.Builder.TOption", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html"},
     {"title": "Command.Builder.TOption.New", "text": "                   AFlag Short option, accepts only a single letter. Do not use leading dash. AName Long option, accepts words, do not use leading dashes or spaces ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. AFlag Short option, accepts only a single letter. Do not use leading dash. AName Long option, accepts words, do not use leading dashes or spaces ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. ", "tags": "", "url": "Command.Builder.TOption.html#New"},
     {"title": "Command.Builder.TOption.Flag", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Flag"},
     {"title": "Command.Builder.TOption.Name", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Name"},
     {"title": "Command.Builder.TOption.Description", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Description"},
     {"title": "Command.Builder.TOption.NotAllowedFlags", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#NotAllowedFlags"},
     {"title": "Command.Builder.TOption.Constraint", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Constraint"},
     {"title": "Command.Builder.TOption.Value", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Value"},
     {"title": "Command.Builder.TCommand", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html"},
     {"title": "Command.Builder.TCommand.Create", "text": "    ", "tags": "", "url": "Command.Builder.TCommand.html#Create"},
     {"title": "Command.Builder.TCommand.HasOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommand.html#HasOptions"},
     {"title": "Command.Builder.TCommand.AddOption", "text": "                   AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. ", "tags": "", "url": "Command.Builder.TCommand.html#AddOption"},
     {"title": "Command.Builder.TCommand.New", "text": "               AName Command name as it will be used via command line ADescription Command description that will be displayed to the user ACallback Callback procedure that will be invoked if this command was selected AConstraints Constraints check to validate correct command usage by the user. AName Command name as it will be used via command line ADescription Command description that will be displayed to the user ACallback Callback procedure that will be invoked if this command was selected AConstraints Constraints check to validate correct command usage by the user. ", "tags": "", "url": "Command.Builder.TCommand.html#New"},
     {"title": "Command.Builder.TCommand.Name", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Name"},
     {"title": "Command.Builder.TCommand.Description", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Description"},
     {"title": "Command.Builder.TCommand.Callback", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Callback"},
     {"title": "Command.Builder.TCommand.Constraints", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Constraints"},
     {"title": "Command.Builder.TCommand.Option", "text": "   AIndex Desired option index position AIndex Desired option index position", "tags": "", "url": "Command.Builder.TCommand.html#Option"},
     {"title": "Command.Builder.TCommand.Options", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Options"},
     {"title": "Command.Builder.TArgument", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html"},
     {"title": "Command.Builder.TArgument.New", "text": "       ADescription Argument description that will be displayed to the user AConstraint Constraints check to validate correct argument usage by the user. ADescription Argument description that will be displayed to the user AConstraint Constraints check to validate correct argument usage by the user. ", "tags": "", "url": "Command.Builder.TArgument.html#New"},
     {"title": "Command.Builder.TArgument.Description", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Description"},
     {"title": "Command.Builder.TArgument.Constraint", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Constraint"},
     {"title": "Command.Builder.TArgument.Value", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Value"},
     {"title": "Command.Builder.TCommandBuilder", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html"},
     {"title": "Command.Builder.TCommandBuilder.Create", "text": "   AExeName Program name without extension. It´s automatically provided by TCommandApp during the initialization. AExeName Program name without extension. It´s automatically provided by TCommandApp during the initialization. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Create"},
     {"title": "Command.Builder.TCommandBuilder.New", "text": "   ATitle Brief description of the tool. It will be displayed on the UsageCommand command. ATitle Brief description of the tool. It will be displayed on the UsageCommand command. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#New"},
     {"title": "Command.Builder.TCommandBuilder.AddCommand", "text": "               ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. Ex: [ccDefault, ccNoArgumentsButCommands] ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. Ex: [ccDefault, ccNoArgumentsButCommands] ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddCommand"},
     {"title": "Command.Builder.TCommandBuilder.AddCommand", "text": "   ACommand Command callback that will be invoked by CommandBuilder to add the command. ACommand Command callback that will be invoked by CommandBuilder to add the command. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddCommand"},
     {"title": "Command.Builder.TCommandBuilder.Description", "text": "    Description of the command that best describes its purpose.&lt;/summay    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Description"},
     {"title": "Command.Builder.TCommandBuilder.CheckConstraints", "text": "   AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CheckConstraints"},
     {"title": "Command.Builder.TCommandBuilder.OnExecute", "text": "   ACallback Callback procedure that will be invoked by the CommandBuilder ACallback Callback procedure that will be invoked by the CommandBuilder ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#OnExecute"},
     {"title": "Command.Builder.TCommandBuilder.AddArgument", "text": "       ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddArgument"},
     {"title": "Command.Builder.TCommandBuilder.AddOption", "text": "                   AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddOption"},
     {"title": "Command.Builder.TCommandBuilder.Parse", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Parse"},
     {"title": "Command.Builder.TCommandBuilder.Validate", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Validate"},
     {"title": "Command.Builder.TCommandBuilder.Execute", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Execute"},
     {"title": "Command.Builder.TCommandBuilder.Run", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Run"},
     {"title": "Command.Builder.TCommandBuilder.CommandSelected", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CommandSelected"},
     {"title": "Command.Builder.TCommandBuilder.SetCommandSelected", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#SetCommandSelected"},
     {"title": "Command.Builder.TCommandBuilder.CommandAsArgument", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CommandAsArgument"},
     {"title": "Command.Builder.TCommandBuilder.SetCommandAsArgument", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#SetCommandAsArgument"},
     {"title": "Command.Builder.TCommandBuilder.GetCommandsFound", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetCommandsFound"},
     {"title": "Command.Builder.TCommandBuilder.GetDefaultCommand", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetDefaultCommand"},
     {"title": "Command.Builder.TCommandBuilder.CheckOption", "text": "   AOption Can be provided short option or long option without leading dashes. AOption Can be provided short option or long option without leading dashes. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CheckOption"},
     {"title": "Command.Builder.TCommandBuilder.CheckOption", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CheckOption"},
     {"title": "Command.Builder.TCommandBuilder.GetRawArguments", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetRawArguments"},
     {"title": "Command.Builder.TCommandBuilder.GetRawOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetRawOptions"},
     {"title": "Command.Builder.TCommandBuilder.ExeName", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ExeName"},
     {"title": "Command.Builder.TCommandBuilder.HasCommands", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasCommands"},
     {"title": "Command.Builder.TCommandBuilder.HasArguments", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasArguments"},
     {"title": "Command.Builder.TCommandBuilder.HasOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasOptions"},
     {"title": "Command.Builder.TCommandBuilder.UseArguments", "text": "   AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#UseArguments"},
     {"title": "Command.Builder.TCommandBuilder.UseColorTheme", "text": "   ATheme Color theme to be used. ATheme Color theme to be used. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#UseColorTheme"},
     {"title": "Command.Builder.TCommandBuilder.Commands", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Commands"},
     {"title": "Command.Builder.TCommandBuilder.Arguments", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Arguments"},
     {"title": "Command.Builder.TCommandBuilder.ParsedOptions", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ParsedOptions"},
     {"title": "Command.Builder.TCommandBuilder.ParsedArguments", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ParsedArguments"},
     {"title": "Command.Builder.TCommandBuilder.InputLn", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#InputLn"},
     {"title": "Command.Builder.TCommandBuilder.Output", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Output"},
     {"title": "Command.Builder.TCommandBuilder.OutputColor", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#OutputColor"},
     {"title": "Command.Builder.TCommandBuilder.ColorTheme", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ColorTheme"},
     {"title": "Command.Builder.TCommandBuilder.Title", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Title"},
     {"title": "Command.Builder.TCommandBuilder.UseShortDescriptions", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#UseShortDescriptions"},
     {"title": "Command.Builder.TCommandBuilder.State", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#State"},
     {"title": "Command.Builder.StandardConsoleInputLn", "text": "    ", "tags": "", "url": "Command.Builder.html#StandardConsoleInputLn"},
     {"title": "Command.Builder.StandardConsoleOutput", "text": "    ", "tags": "", "url": "Command.Builder.html#StandardConsoleOutput"},
     {"title": "Command.Builder.ColorConsoleOutput", "text": "    ", "tags": "", "url": "Command.Builder.html#ColorConsoleOutput"},
     {"title": "Command.Colors", "text": "    To use it, just add it to the program's uses clause, choose a theme from LightColorTheme or DarkColorTheme, you can also define your own theme using the record TColorTheme and assigning it to the TCommandBuilder.ColorTheme. See the example:          Application.CommandBuilder.ColorTheme := DarkColorTheme;  Application.CommandBuilder.OutputColor('Hello world', Application.CommandBuilder.Title);        See TCommandBuilder.OutputColor on how to use it. Color constants can be used directly as parameters for functions, in the example above we only used the theme for convention purposes. Library commands like UsageCommand, VersionCommand are directly affected by the chosen theme.    NoteThis unit has an intilization section that tries to figure out the console color before any color change. This color will be restored before application terminates via the code in finalzation section.   ", "tags": "", "url": "Command.Colors.html"},
     {"title": "Command.Colors.Black", "text": "   ", "tags": "", "url": "Command.Colors.html#Black"},
     {"title": "Command.Colors.Blue", "text": "   ", "tags": "", "url": "Command.Colors.html#Blue"},
     {"title": "Command.Colors.Green", "text": "   ", "tags": "", "url": "Command.Colors.html#Green"},
     {"title": "Command.Colors.Cyan", "text": "   ", "tags": "", "url": "Command.Colors.html#Cyan"},
     {"title": "Command.Colors.Red", "text": "   ", "tags": "", "url": "Command.Colors.html#Red"},
     {"title": "Command.Colors.Magenta", "text": "   ", "tags": "", "url": "Command.Colors.html#Magenta"},
     {"title": "Command.Colors.Brown", "text": "   ", "tags": "", "url": "Command.Colors.html#Brown"},
     {"title": "Command.Colors.LightGray", "text": "   ", "tags": "", "url": "Command.Colors.html#LightGray"},
     {"title": "Command.Colors.DarkGray", "text": "   ", "tags": "", "url": "Command.Colors.html#DarkGray"},
     {"title": "Command.Colors.LightBlue", "text": "   ", "tags": "", "url": "Command.Colors.html#LightBlue"},
     {"title": "Command.Colors.LightGreen", "text": "   ", "tags": "", "url": "Command.Colors.html#LightGreen"},
     {"title": "Command.Colors.LightCyan", "text": "   ", "tags": "", "url": "Command.Colors.html#LightCyan"},
     {"title": "Command.Colors.LightRed", "text": "   ", "tags": "", "url": "Command.Colors.html#LightRed"},
     {"title": "Command.Colors.LightMagenta", "text": "   ", "tags": "", "url": "Command.Colors.html#LightMagenta"},
     {"title": "Command.Colors.Yellow", "text": "   ", "tags": "", "url": "Command.Colors.html#Yellow"},
     {"title": "Command.Colors.White", "text": "   ", "tags": "", "url": "Command.Colors.html#White"},
     {"title": "Command.Colors.ChangeConsoleColor", "text": " Ex: change text output color to LightGreen color constant:    ChangeConsoleColor(LightGreen);    ", "tags": "", "url": "Command.Colors.html#ChangeConsoleColor"},
     {"title": "Command.Colors.OutputPalleteColor", "text": "    ", "tags": "", "url": "Command.Colors.html#OutputPalleteColor"},
     {"title": "Command.Colors.StartupColor", "text": "   ", "tags": "", "url": "Command.Colors.html#StartupColor"},
     {"title": "Command.Colors.StartColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#StartColorTheme"},
     {"title": "Command.Colors.LightColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#LightColorTheme"},
     {"title": "Command.Colors.DarkColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#DarkColorTheme"},
     {"title": "Command.Helpers", "text": "   ", "tags": "", "url": "Command.Helpers.html"},
     {"title": "Command.Helpers.AppendToArray", "text": "       AArray Variable of type TArray&lt;string&gt; to which an item will be added. AText String to be added to the array. AArray Variable of type TArray&lt;string&gt; to which an item will be added. AText String to be added to the array. ", "tags": "", "url": "Command.Helpers.html#AppendToArray"},
     {"title": "Command.Helpers.RemoveStartingDashes", "text": "   LOption String option passed as an argument via the command line that will be processed to remove the leading &quot;-&quot;. LOption String option passed as an argument via the command line that will be processed to remove the leading &quot;-&quot;. ", "tags": "", "url": "Command.Helpers.html#RemoveStartingDashes"},
     {"title": "Command.Helpers.SplitOptionAndValue", "text": "   AOption String option passed as an argument via the command line that will be processed split a possible value from the option name. AOption String option passed as an argument via the command line that will be processed split a possible value from the option name. ", "tags": "", "url": "Command.Helpers.html#SplitOptionAndValue"},
     {"title": "Command.Interfaces", "text": "   ", "tags": "", "url": "Command.Interfaces.html"},
     {"title": "Command.Interfaces.TColorTheme", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html"},
     {"title": "Command.Interfaces.TColorTheme.Title", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Title"},
     {"title": "Command.Interfaces.TColorTheme.Value", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Value"},
     {"title": "Command.Interfaces.TColorTheme.Text", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Text"},
     {"title": "Command.Interfaces.TColorTheme.Error", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Error"},
     {"title": "Command.Interfaces.TColorTheme.Other", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Other"},
     {"title": "Command.Interfaces.IOption", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html"},
     {"title": "Command.Interfaces.IOption.GetFlag", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetFlag"},
     {"title": "Command.Interfaces.IOption.SetFlag", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetFlag"},
     {"title": "Command.Interfaces.IOption.GetName", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetName"},
     {"title": "Command.Interfaces.IOption.SetName", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetName"},
     {"title": "Command.Interfaces.IOption.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetDescription"},
     {"title": "Command.Interfaces.IOption.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetDescription"},
     {"title": "Command.Interfaces.IOption.SetNotAllowedFlags", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetNotAllowedFlags"},
     {"title": "Command.Interfaces.IOption.GetNotAllowedFlags", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetNotAllowedFlags"},
     {"title": "Command.Interfaces.IOption.GetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetConstraint"},
     {"title": "Command.Interfaces.IOption.SetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetConstraint"},
     {"title": "Command.Interfaces.IOption.GetValue", "text": "returns the value of the option provided via parameter, this value should assigned after parse    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetValue"},
     {"title": "Command.Interfaces.IOption.SetValue", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetValue"},
     {"title": "Command.Interfaces.IOption.Flag", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Flag"},
     {"title": "Command.Interfaces.IOption.Name", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Name"},
     {"title": "Command.Interfaces.IOption.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Description"},
     {"title": "Command.Interfaces.IOption.NotAllowedFlags", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#NotAllowedFlags"},
     {"title": "Command.Interfaces.IOption.Constraint", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Constraint"},
     {"title": "Command.Interfaces.IOption.Value", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Value"},
     {"title": "Command.Interfaces.ICommand", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html"},
     {"title": "Command.Interfaces.ICommand.GetName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetName"},
     {"title": "Command.Interfaces.ICommand.SetName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetName"},
     {"title": "Command.Interfaces.ICommand.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetDescription"},
     {"title": "Command.Interfaces.ICommand.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetDescription"},
     {"title": "Command.Interfaces.ICommand.GetCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetCallback"},
     {"title": "Command.Interfaces.ICommand.SetCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetCallback"},
     {"title": "Command.Interfaces.ICommand.GetConstraints", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetConstraints"},
     {"title": "Command.Interfaces.ICommand.SetConstraints", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetConstraints"},
     {"title": "Command.Interfaces.ICommand.GetOption", "text": "   AIndex Desired option index position AIndex Desired option index position ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetOption"},
     {"title": "Command.Interfaces.ICommand.GetOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetOptions"},
     {"title": "Command.Interfaces.ICommand.HasOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#HasOptions"},
     {"title": "Command.Interfaces.ICommand.AddOption", "text": "                   AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. ", "tags": "", "url": "Command.Interfaces.ICommand.html#AddOption"},
     {"title": "Command.Interfaces.ICommand.Name", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Name"},
     {"title": "Command.Interfaces.ICommand.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Description"},
     {"title": "Command.Interfaces.ICommand.Callback", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Callback"},
     {"title": "Command.Interfaces.ICommand.Constraints", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Constraints"},
     {"title": "Command.Interfaces.ICommand.Option", "text": "   AIndex Desired option index position AIndex Desired option index position", "tags": "", "url": "Command.Interfaces.ICommand.html#Option"},
     {"title": "Command.Interfaces.ICommand.Options", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Options"},
     {"title": "Command.Interfaces.IArgument", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html"},
     {"title": "Command.Interfaces.IArgument.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetDescription"},
     {"title": "Command.Interfaces.IArgument.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetDescription"},
     {"title": "Command.Interfaces.IArgument.GetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetConstraint"},
     {"title": "Command.Interfaces.IArgument.SetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetConstraint"},
     {"title": "Command.Interfaces.IArgument.GetValue", "text": "returns the value of argument provided via parameter, this value should assigned after parse    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetValue"},
     {"title": "Command.Interfaces.IArgument.SetValue", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetValue"},
     {"title": "Command.Interfaces.IArgument.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Description"},
     {"title": "Command.Interfaces.IArgument.Constraint", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Constraint"},
     {"title": "Command.Interfaces.IArgument.Value", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Value"},
     {"title": "Command.Interfaces.ICommandBuilder", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html"},
     {"title": "Command.Interfaces.ICommandBuilder.AddCommand", "text": "               ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddCommand"},
     {"title": "Command.Interfaces.ICommandBuilder.AddCommand", "text": "   ACommand Command callback that will be invoked by CommandBuilder to add the command. ACommand Command callback that will be invoked by CommandBuilder to add the command. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddCommand"},
     {"title": "Command.Interfaces.ICommandBuilder.GetCommands", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetCommands"},
     {"title": "Command.Interfaces.ICommandBuilder.GetCommandsFound", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetCommandsFound"},
     {"title": "Command.Interfaces.ICommandBuilder.GetDefaultCommand", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetDefaultCommand"},
     {"title": "Command.Interfaces.ICommandBuilder.Description", "text": "    Description of the command that best describes its purpose.&lt;/summay    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Description"},
     {"title": "Command.Interfaces.ICommandBuilder.CheckConstraints", "text": "   AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CheckConstraints"},
     {"title": "Command.Interfaces.ICommandBuilder.OnExecute", "text": "   ACallback Callback procedure that will be invoked by the CommandBuilder ACallback Callback procedure that will be invoked by the CommandBuilder ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#OnExecute"},
     {"title": "Command.Interfaces.ICommandBuilder.AddArgument", "text": "       ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.GetArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.AddOption", "text": "                   AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AConstraint Option constraint that will be validated against the options provided by the user in order to guarantee that the command is being used correctly. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddOption"},
     {"title": "Command.Interfaces.ICommandBuilder.Parse", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Parse"},
     {"title": "Command.Interfaces.ICommandBuilder.Validate", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Validate"},
     {"title": "Command.Interfaces.ICommandBuilder.Execute", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Execute"},
     {"title": "Command.Interfaces.ICommandBuilder.Run", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Run"},
     {"title": "Command.Interfaces.ICommandBuilder.CommandSelected", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CommandSelected"},
     {"title": "Command.Interfaces.ICommandBuilder.SetCommandSelected", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetCommandSelected"},
     {"title": "Command.Interfaces.ICommandBuilder.CommandAsArgument", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CommandAsArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.SetCommandAsArgument", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetCommandAsArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.GetParsedOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetParsedOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.CheckOption", "text": "       AOption Can be provided short option or long option without leading dashes. AValue Returns the value of the option if it was provided by the user. AOption Can be provided short option or long option without leading dashes. AValue Returns the value of the option if it was provided by the user. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CheckOption"},
     {"title": "Command.Interfaces.ICommandBuilder.CheckOption", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CheckOption"},
     {"title": "Command.Interfaces.ICommandBuilder.GetParsedArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetParsedArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.GetRawArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetRawArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.GetRawOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetRawOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.ExeName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ExeName"},
     {"title": "Command.Interfaces.ICommandBuilder.HasCommands", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasCommands"},
     {"title": "Command.Interfaces.ICommandBuilder.HasArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.HasOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.GetInputLn", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetInputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.SetInputLn", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetInputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.GetOutput", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetOutput"},
     {"title": "Command.Interfaces.ICommandBuilder.SetOutput", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetOutput"},
     {"title": "Command.Interfaces.ICommandBuilder.GetOutputColor", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetOutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.SetOutputColor", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetOutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.UseArguments", "text": "   AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#UseArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.UseColorTheme", "text": "   ATheme Color theme to be used. ATheme Color theme to be used. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#UseColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.GetColorTheme", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.SetColorTheme", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.GetTitle", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetTitle"},
     {"title": "Command.Interfaces.ICommandBuilder.SetTitle", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetTitle"},
     {"title": "Command.Interfaces.ICommandBuilder.GetUseShortDescriptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetUseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.SetUseShortDescriptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetUseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.GetState", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetState"},
     {"title": "Command.Interfaces.ICommandBuilder.SetState", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetState"},
     {"title": "Command.Interfaces.ICommandBuilder.Commands", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Commands"},
     {"title": "Command.Interfaces.ICommandBuilder.Arguments", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Arguments"},
     {"title": "Command.Interfaces.ICommandBuilder.ParsedOptions", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ParsedOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.ParsedArguments", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ParsedArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.InputLn", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#InputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.Output", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Output"},
     {"title": "Command.Interfaces.ICommandBuilder.OutputColor", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#OutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.ColorTheme", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.Title", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Title"},
     {"title": "Command.Interfaces.ICommandBuilder.UseShortDescriptions", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#UseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.State", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#State"},
     {"title": "Command.Interfaces.IValidatorContext", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html"},
     {"title": "Command.Interfaces.IValidatorContext.Add", "text": "    A valid instance of IValidatorBase responsible for processing a specific type of validation.)    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#Add"},
     {"title": "Command.Interfaces.IValidatorContext.HandleValidation", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#HandleValidation"},
     {"title": "Command.Interfaces.IValidatorContext.Validate", "text": "    CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it.)    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#Validate"},
     {"title": "Command.Interfaces.IValidatorBase", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html"},
     {"title": "Command.Interfaces.IValidatorBase.GetSucessor", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#GetSucessor"},
     {"title": "Command.Interfaces.IValidatorBase.SetSucessor", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#SetSucessor"},
     {"title": "Command.Interfaces.IValidatorBase.Validate", "text": "    CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it.)    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#Validate"},
     {"title": "Command.Interfaces.IValidatorBase.Sucessor", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#Sucessor"},
     {"title": "Command.Interfaces.TCommandConstraint", "text": "    ccDefault  Indicates the default command that will be invoked by the CommandBuilder when a command is not informed through the command line by the user.    ccRequiresOneArgument  Indicates that the command requires at least one given argument to be used.    ccRequiresOneOption  Indicates that the command requires at least one option entered to be used.    ccNoArgumentsButCommands  Indicates that the command requires another command to function and does not accept arguments. A clear example of usage is the help command itself, which can provide instructions for using other commands.    ccNoParameters  Indicates that the command should be used without any parameters.   ", "tags": "", "url": "Command.Interfaces.html#TCommandConstraint"},
     {"title": "Command.Interfaces.TCommandConstraints", "text": "   ", "tags": "", "url": "Command.Interfaces.html#TCommandConstraints"},
     {"title": "Command.Interfaces.TOptionConstraint", "text": "    ocNoValue  Indicates that a value is not accepted for the option.   ocRequiresValue  Indicates that a value is required for the option.    ocOptionalValue  Indicates that a value is optional for the option.   ", "tags": "", "url": "Command.Interfaces.html#TOptionConstraint"},
     {"title": "Command.Interfaces.TArgumentConstraint", "text": "    acRequired  Indicates that the argument is required. Do not use it if one command doest not require any parameters.    acOptional  Indicates that the argument is optional.   ", "tags": "", "url": "Command.Interfaces.html#TArgumentConstraint"},
     {"title": "Command.Interfaces.TCommandCallback", "text": "   ABuilder Instance of CommandBuilder that processed, validated, and identified the callback command being called. ABuilder Instance of CommandBuilder that processed, validated, and identified the callback command being called. ", "tags": "", "url": "Command.Interfaces.html#TCommandCallback"},
     {"title": "Command.Interfaces.TAddCommandCallback", "text": "   ABuilder Instance of CommandBuilder used to add the command. ABuilder Instance of CommandBuilder used to add the command. ", "tags": "", "url": "Command.Interfaces.html#TAddCommandCallback"},
     {"title": "Command.Interfaces.TOutputCallback", "text": "   AMessage Text that will be printed on output. AMessage Text that will be printed on output. ", "tags": "", "url": "Command.Interfaces.html#TOutputCallback"},
     {"title": "Command.Interfaces.TOutputColorCallback", "text": "       AMessage Text that will be printed on output. AColor Color that should be used to print the text. AMessage Text that will be printed on output. AColor Color that should be used to print the text. ", "tags": "", "url": "Command.Interfaces.html#TOutputColorCallback"},
     {"title": "Command.Interfaces.TInputLnCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.html#TInputLnCallback"},
     {"title": "Command.Usage", "text": "   ", "tags": "", "url": "Command.Usage.html"},
     {"title": "Command.Usage.UsageCommand", "text": " If a given command needs another command as a parameter (for example help command).This command should be configured using ccNoArgumentsButCommands constraint allowing another command to be passed as parameter to UsageCommand.    To use this command, just add the Command.Usage to the uses clause:       uses Command.Usage;     And call Registry procedure to add this command to the builder: Ex:       Command.Usage.Registry(MyApp.CommandBuilder);     or you can use the overloaded version of AddCommand to add the command to the builder using fluent interface:       MyBuilder    .AddCommand(Command.Usage.Registry);     or customize your own configuration:       MyApp.CommandBuilder    .AddCommand(      'help',       'Shows information about how to use this tool or about a specific command.' + #13#10 +      'Ex: ' + ABuilder.ExeName + ' help',       @UsageCommand,      [ccDefault, ccNoArgumentsButCommands]);       ABuilder Instance of CommandBuilder from which the settings will be read to show usage information via the command line. ABuilder Instance of CommandBuilder from which the settings will be read to show usage information via the command line. ", "tags": "", "url": "Command.Usage.html#UsageCommand"},
     {"title": "Command.Usage.GetArgumentList", "text": "   ABuilder Instance of CommandBuilder from which data will be read. ABuilder Instance of CommandBuilder from which data will be read. ", "tags": "", "url": "Command.Usage.html#GetArgumentList"},
     {"title": "Command.Usage.WriteUsage", "text": "                   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ATitle Application title ACommand Command name AOptions Options list AArgument Argument description ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ATitle Application title ACommand Command name AOptions Options list AArgument Argument description ", "tags": "", "url": "Command.Usage.html#WriteUsage"},
     {"title": "Command.Usage.WriteCommandUsage", "text": "   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ", "tags": "", "url": "Command.Usage.html#WriteCommandUsage"},
     {"title": "Command.Usage.WriteGeneralUsage", "text": "   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ", "tags": "", "url": "Command.Usage.html#WriteGeneralUsage"},
     {"title": "Command.Usage.Registry", "text": "    Ex:       Command.Usage.Registry(MyApp.CommandBuilder);     Ex with fluent interface:       Builder.AddCommand(Command.Usage.Registry);       ABuilder CommandBuilder instance that will be used to register the UsageCommand. ABuilder CommandBuilder instance that will be used to register the UsageCommand. ", "tags": "", "url": "Command.Usage.html#Registry"},
     {"title": "Command.Validator", "text": "   ", "tags": "", "url": "Command.Validator.html"},
     {"title": "Command.Validator.TValidatorContext", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorContext.html"},
     {"title": "Command.Validator.TValidatorContext.Create", "text": "    ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Create"},
     {"title": "Command.Validator.TValidatorContext.Add", "text": "   AValidator A valid instance of IValidatorBase responsible for processing a specific type of validation. AValidator A valid instance of IValidatorBase responsible for processing a specific type of validation. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Add"},
     {"title": "Command.Validator.TValidatorContext.HandleValidation", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#HandleValidation"},
     {"title": "Command.Validator.TValidatorContext.Validate", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Validate"},
     {"title": "Command.Validator.TValidatorBase", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorBase.html"},
     {"title": "Command.Validator.TValidatorBase.Create", "text": "    ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Create"},
     {"title": "Command.Validator.TValidatorBase.Validate", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Validate"},
     {"title": "Command.Validator.TValidatorBase.Sucessor", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Sucessor"},
     {"title": "Command.Validator.TConfiguredCommandWithCallback", "text": "   ", "tags": "", "url": "Command.Validator.TConfiguredCommandWithCallback.html"},
     {"title": "Command.Validator.TConfiguredCommandWithCallback.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TConfiguredCommandWithCallback.html#Validate"},
     {"title": "Command.Validator.TDuplicateArgumentValidator", "text": "   ", "tags": "", "url": "Command.Validator.TDuplicateArgumentValidator.html"},
     {"title": "Command.Validator.TDuplicateArgumentValidator.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TDuplicateArgumentValidator.html#Validate"},
     {"title": "Command.Validator.TDuplicateOptionValidator", "text": "   ", "tags": "", "url": "Command.Validator.TDuplicateOptionValidator.html"},
     {"title": "Command.Validator.TDuplicateOptionValidator.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TDuplicateOptionValidator.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotValid", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotValid.html"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotValid.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotValid.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotRequired", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotRequired.html"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotRequired.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotRequired.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.html"},
     {"title": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.html"},
     {"title": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneArguments", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneArguments.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneArguments.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneArguments.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresNoArguments", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresNoArguments.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresNoArguments.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresNoArguments.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneOption", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneOption.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneOption.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneOption.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateIfOptionsExists", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateIfOptionsExists.html"},
     {"title": "Command.Validator.TSelectedCommandValidateIfOptionsExists.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateIfOptionsExists.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateRejectedOption", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateRejectedOption.html"},
     {"title": "Command.Validator.TSelectedCommandValidateRejectedOption.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateRejectedOption.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateOptionValueNotRequired", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateOptionValueNotRequired.html"},
     {"title": "Command.Validator.TSelectedCommandValidateOptionValueNotRequired.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateOptionValueNotRequired.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateOptionValueRequired", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateOptionValueRequired.html"},
     {"title": "Command.Validator.TSelectedCommandValidateOptionValueRequired.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateOptionValueRequired.html#Validate"},
     {"title": "Command.Version", "text": "   ", "tags": "", "url": "Command.Version.html"},
     {"title": "Command.Version.VersionCommand", "text": "    NoteRequires version information to be defined in the Lazarus project .lpi file. Also the main program must include the {$R *.res} directive. If a different color theme is specified for the TCommandBuilder.ColorTheme, the output will be properly done.    To use this command add the Command.Version unit to the uses clause and run the following command:       Command.Version.Registry(MyApp.CommandBuilder);     or you can use the overloaded version of AddCommand to add the command to the builder using fluent interface:       MyBuilder    .AddCommand(Command.Version.Registry);       ABuilder CommandBuilder that will be used to output the version information. ABuilder CommandBuilder that will be used to output the version information. ", "tags": "", "url": "Command.Version.html#VersionCommand"},
     {"title": "Command.Version.Registry", "text": "    Ex:       Command.Version.Registry(MyApp.CommandBuilder);     Ex with fluent interface:       Builder.AddCommand(Command.Version.Registry);       ABuilder CommandBuilder instance that will be used to register the VersionCommand. ABuilder CommandBuilder instance that will be used to register the VersionCommand. ", "tags": "", "url": "Command.Version.html#Registry"}
]};
